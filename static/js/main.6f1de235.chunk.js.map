{"version":3,"sources":["components/TodoList/TodoItem.jsx","components/TodoList/TodoList.jsx","components/AddTodos/AddTodos.jsx","components/TodosFilter/TodosFilter.jsx","constants.js","components/App.jsx","index.js"],"names":["TodoItem","todo","onToggleToDo","removeTodo","changeTodo","useState","editTodo","setEditTodo","title","todoTitle","setTodoTitle","className","classNames","completed","editing","onDoubleClick","type","value","autoFocus","onChange","event","target","onKeyUp","key","id","trim","onBlur","checked","onClick","TodoList","todos","setTodos","todoId","prevTodos","map","AddTodos","newTodoTitle","setNewTodoTitle","onSubmit","preventDefault","length","reduce","accum","currentTodo","addNewTodo","placeholder","TodosFilter","filterForTodos","setFilterForTodos","FILTERS","selectTodosFilter","href","selected","all","active","App","unCompletedTodos","setUnCompletedTodos","completedTodos","setCompletedTodos","allTodosToogler","setAllTodosToogler","useEffect","JSON","parse","localStorage","getItem","filteredTodos","useMemo","filter","every","item","setItem","stringify","markAllTodos","useCallback","prev","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f1de235.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames/bind';\n\nexport const TodoItem = ({\n  todo,\n  onToggleToDo,\n  removeTodo,\n  changeTodo,\n}) => {\n  const [editTodo, setEditTodo] = useState(false);\n  const [todoTitle, setTodoTitle] = useState(todo.title);\n\n  const handleEditing = (event) => {\n    if (event.key === 'Enter') {\n      if (todoTitle) {\n        changeTodo(todo.id, todoTitle.trim());\n      } else {\n        removeTodo(todo.id);\n      }\n\n      setEditTodo(false);\n    }\n\n    if (event.key === 'Escape') {\n      setTodoTitle(todo.title);\n      setEditTodo(false);\n    }\n  };\n\n  const removefocus = (event) => {\n    if (todoTitle) {\n      changeTodo(todo.id, todoTitle.trim());\n    } else {\n      removeTodo(todo.id);\n    }\n\n    setEditTodo(false);\n  };\n\n  return (\n    <li\n      className={classNames({\n        completed: todo.completed,\n        editing: editTodo,\n      })}\n      onDoubleClick={() => setEditTodo(!editTodo)}\n    >\n      {!editTodo\n        ? (\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              checked={todo.completed}\n              onChange={event => onToggleToDo(event, todo.id)}\n            />\n            <label>\n              {todo.title}\n            </label>\n            <button\n              type=\"button\"\n              className=\"destroy\"\n              onClick={() => removeTodo(todo.id)}\n            />\n          </div>\n        )\n        : (\n          <input\n            type=\"text\"\n            className=\"edit\"\n            value={todoTitle}\n            autoFocus\n            onChange={event => setTodoTitle(event.target.value)}\n            onKeyUp={handleEditing}\n            onBlur={removefocus}\n          />\n        )\n      }\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.isRequired,\n    completed: PropTypes.bool.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n  onToggleToDo: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  changeTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes, { shape } from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({\n  todos,\n  setTodos,\n  removeTodo,\n  changeTodo,\n}) => {\n  const onToggleToDo = (event, todoId) => {\n    setTodos(\n      prevTodos => prevTodos.map(todo => (todo.id === todoId\n        ? {\n          ...todo,\n          completed: !todo.completed,\n        }\n        : todo)),\n    );\n  };\n\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          onToggleToDo={onToggleToDo}\n          removeTodo={removeTodo}\n          changeTodo={changeTodo}\n        />\n      ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(shape({\n    id: PropTypes.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  setTodos: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  changeTodo: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes, { shape } from 'prop-types';\n\nexport const AddTodos = ({ todos, setTodos }) => {\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n\n  const addNewTodo = (event) => {\n    event.preventDefault();\n\n    if (newTodoTitle === '') {\n      return;\n    }\n\n    setTodos(prevTodos => [...prevTodos, {\n      title: newTodoTitle,\n      id: todos.length === 0 ? 1\n        : todos.reduce((accum, currentTodo) => (\n          accum > currentTodo.id ? accum : currentTodo.id),\n        0) + 1,\n      completed: false,\n    }]);\n\n    setNewTodoTitle('');\n  };\n\n  return (\n    <form onSubmit={event => addNewTodo(event)}>\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={newTodoTitle}\n        onChange={({ target }) => setNewTodoTitle(target.value)}\n      />\n    </form>\n  );\n};\n\nAddTodos.propTypes = {\n  todos: PropTypes.arrayOf(shape({\n    id: PropTypes.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  setTodos: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\n\nexport const TodosFilter = ({\n  filterForTodos,\n  setFilterForTodos,\n  FILTERS,\n}) => {\n  const selectTodosFilter = (event, value) => {\n    event.preventDefault();\n    setFilterForTodos(value);\n  };\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={classNames({\n            selected: filterForTodos === FILTERS.all,\n          })}\n          onClick={event => selectTodosFilter(event, FILTERS.all)}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={classNames({\n            selected: filterForTodos === FILTERS.active,\n          })}\n          onClick={event => selectTodosFilter(event, FILTERS.active)}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={classNames({\n            selected: filterForTodos === FILTERS.completed,\n          })}\n          onClick={event => selectTodosFilter(event, FILTERS.completed)}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n};\n\nTodosFilter.propTypes = {\n  filterForTodos: PropTypes.string.isRequired,\n  setFilterForTodos: PropTypes.func.isRequired,\n  FILTERS: PropTypes.shape({\n    all: PropTypes.string.isRequired,\n    active: PropTypes.string.isRequired,\n    completed: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","export const FILTERS = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { TodoList } from './TodoList/TodoList';\nimport { AddTodos } from './AddTodos/AddTodos';\nimport { TodosFilter } from './TodosFilter/TodosFilter';\nimport { FILTERS } from '../constants';\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n  const [filterForTodos, setFilterForTodos] = useState(FILTERS.all);\n  const [unCompletedTodos, setUnCompletedTodos] = useState('');\n  const [completedTodos, setCompletedTodos] = useState('');\n  const [allTodosToogler, setAllTodosToogler] = useState(false);\n\n  useEffect(() => {\n    if (JSON.parse(localStorage.getItem('todos'))) {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n    }\n  }, []);\n\n  const filterTodosByCompleteStatus = () => {\n    if (filterForTodos === FILTERS.all) {\n      return todos;\n    }\n\n    return todos.filter(todo => (\n      filterForTodos === FILTERS.completed\n        ? todo.completed\n        : !todo.completed\n    ));\n  };\n\n  const filteredTodos = useMemo(\n    () => filterTodosByCompleteStatus(),\n    [filterForTodos, todos],\n  );\n\n  useEffect(() => {\n    setUnCompletedTodos(() => todos.filter(todo => !todo.completed));\n    setCompletedTodos(() => todos.filter(todo => todo.completed));\n    setAllTodosToogler(() => todos.every(item => item.completed === true));\n\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const markAllTodos = useCallback(() => {\n    setTodos(prev => prev\n      .map(todo => ({ ...todo, completed: !allTodosToogler })));\n  }, [allTodosToogler]);\n\n  const removeTodo = (todoId) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n  };\n\n  const changeTodo = (todoId, newTodoTitle) => {\n    setTodos(prev => (prev.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          title: newTodoTitle,\n        };\n      }\n\n      return todo;\n    })\n    ));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <AddTodos\n          todos={todos}\n          setTodos={setTodos}\n        />\n      </header>\n      {todos.length !== 0\n        ? (\n          <>\n            <section className=\"main\">\n              <input\n                type=\"checkbox\"\n                id=\"toggle-all\"\n                className=\"toggle-all\"\n                checked={allTodosToogler}\n                onChange={() => markAllTodos()}\n              />\n              <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n              <TodoList\n                todos={filteredTodos}\n                setTodos={setTodos}\n                removeTodo={removeTodo}\n                changeTodo={changeTodo}\n              />\n            </section>\n\n            <footer className=\"footer\">\n              <span className=\"todo-count\">\n                {unCompletedTodos.length}\n                {unCompletedTodos.length === 1 ? ' item ' : ' items '}\n                left\n              </span>\n\n              <TodosFilter\n                todos={todos}\n                filterForTodos={filterForTodos}\n                setFilterForTodos={setFilterForTodos}\n                FILTERS={FILTERS}\n              />\n              {completedTodos.length > 0\n                ? (\n                  <button\n                    type=\"button\"\n                    className=\"clear-completed\"\n                    onClick={() => setTodos(unCompletedTodos)}\n                  >\n                    Clear completed\n                  </button>\n                )\n                : ''\n              }\n\n            </footer>\n          </>\n        )\n        : ''\n      }\n\n    </section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './components/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}