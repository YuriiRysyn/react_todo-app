{"version":3,"sources":["components/TodoList/TodoItem.jsx","components/TodoList/TodoList.jsx","components/AddTodos/AddTodos.jsx","components/TodosFilter/TodosFilter.jsx","components/TodoApp.jsx","App.js","index.js"],"names":["TodoItem","todo","onToggleToDo","className","classNames","completed","type","checked","onChange","event","id","title","TodoList","todos","setTodos","todoId","prevTodos","map","key","AddTodos","useState","newTodoTitle","setNewTodoTitle","onSubmit","preventDefault","length","reduce","accum","currentTodo","addNewTodo","placeholder","value","target","TodosFilter","href","TodoApp","completedTodos","setCompletedTodos","allTodosToogler","setAllTodosToogler","useEffect","filter","every","item","htmlFor","basicTodos","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b91ddea1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames/bind';\n\nexport const TodoItem = ({ todo, onToggleToDo }) => (\n  <li\n    className={classNames({ completed: todo.completed })}\n  >\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        checked={todo.completed}\n        onChange={event => onToggleToDo(event, todo.id)}\n      />\n      <label>{todo.title}</label>\n      <button type=\"button\" className=\"destroy\" />\n    </div>\n    <input type=\"text\" className=\"edit\" />\n  </li>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.isRequired,\n    completed: PropTypes.bool.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n  onToggleToDo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes, { shape } from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({ todos, setTodos }) => {\n  const onToggleToDo = (event, todoId) => {\n    setTodos(\n      prevTodos => prevTodos.map(todo => (todo.id === todoId\n        ? {\n          ...todo,\n          completed: !todo.completed,\n        }\n        : todo)),\n    );\n  };\n\n  return (\n    <ul className=\"todo-list\">\n      {/* { console.log(todos)} */}\n      {todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          onToggleToDo={onToggleToDo}\n        />\n      ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(shape({\n    id: PropTypes.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  setTodos: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes, { shape } from 'prop-types';\n\nexport const AddTodos = ({ todos, setTodos }) => {\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n\n  const addNewTodo = (event) => {\n    event.preventDefault();\n\n    if (newTodoTitle === '') {\n      return;\n    }\n\n    setTodos(prevTodos => [...prevTodos, {\n      title: newTodoTitle,\n      id: todos.length === 0 ? 1\n        : todos.reduce((accum, currentTodo) => (\n          accum > currentTodo.id ? accum : currentTodo.id),\n        0) + 1,\n      completed: false,\n    }]);\n\n    setNewTodoTitle('');\n  };\n\n  return (\n    <form onSubmit={event => addNewTodo(event)}>\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={newTodoTitle}\n        onChange={({ target }) => setNewTodoTitle(target.value)}\n      />\n    </form>\n  );\n};\n\nAddTodos.propTypes = {\n  todos: PropTypes.arrayOf(shape({\n    id: PropTypes.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  setTodos: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\n// eslint-disable-next-line arrow-body-style\nexport const TodosFilter = () => {\n  // const [filterForTodos, setFilterForTodos] = useState('All');\n  // const [filteredTodos, setFilteredTodos] = useState();\n\n  // useEffect(() => {\n  //   setFilteredTodos(prevTodos => (\n  //     filterForTodos === 'All'\n  //       ? prevTodos\n  //       : prevTodos.filter(todo => (\n  //         filterForTodos === 'Comleted'\n  //           ? todo.completed\n  //           : !todo.completed\n  //       ))\n  //   ));\n  // }, [filterForTodos]);\n\n  // const selectTodosFilter = (event) => {\n  //   event.preventDefault();\n  //   console.log(event.target.value);\n  //   setFilterForTodos(event.target.value);\n  // };\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className=\"selected\"\n          // onClick={event => selectTodosFilter(event)}\n          // value=\"All\"\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          // onClick={event => selectTodosFilter(event)}\n          // value=\"Active\"\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          // onClick={event => selectTodosFilter(event)}\n          // value=\"Completed\"\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes, { shape } from 'prop-types';\n\nimport { TodoList } from './TodoList/TodoList';\nimport { AddTodos } from './AddTodos/AddTodos';\nimport { TodosFilter } from './TodosFilter/TodosFilter';\n\nexport const TodoApp = ({\n  todos,\n  setTodos,\n  // fileteForTodos,\n  // setFilterForTodos,\n}) => {\n  // console.log(todos);\n  const [completedTodos, setCompletedTodos] = useState('');\n\n  // const completedTodos = todos.filter(todo => todo.completed);\n\n  const [allTodosToogler, setAllTodosToogler] = useState(false);\n\n  useEffect(() => {\n    setCompletedTodos(() => todos.filter(todo => !todo.completed));\n    setAllTodosToogler(() => todos.every(item => item.completed === true));\n  }, [todos]);\n\n  // const markAllTodos = () => {\n  // // console.log(todos);\n\n  //   if (allTodosToogler) {\n  //     setTodos(() => {\n  //       todos.map(todo => {\n  //         console.log(todo)\n  //         return ({ ...todo, completed: true })\n  //       });\n  //     });\n  //   }\n\n  //   // console.log(todos);\n  // };\n\n  // useEffect(() => {\n  //   if (allTodosToogler) {\n  //     setTodos(() => {\n  //       todos.map(todo => ({ ...todo, completed: true }));\n  //     });\n  //   }\n  // }, [allTodosToogler]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <AddTodos\n          todos={todos}\n          setTodos={setTodos}\n        />\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={allTodosToogler}\n          onChange={() => setAllTodosToogler(!allTodosToogler)}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <TodoList\n          todos={todos}\n          setTodos={setTodos}\n        />\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {completedTodos.length}\n          { completedTodos.length === 1 ? ' item ' : ' items '}\n          left\n        </span>\n\n        <TodosFilter\n          todos={todos}\n          // filterForTodos={filterForTodos}\n          // setFilterForTodos={setFilterForTodos}\n        />\n\n        {/* <ul className=\"filters\">\n          <li>\n            <a href=\"#/\" className=\"selected\">All</a>\n          </li>\n\n          <li>\n            <a href=\"#/active\">Active</a>\n          </li>\n\n          <li>\n            <a href=\"#/completed\">Completed</a>\n          </li>\n        </ul> */}\n\n        <button type=\"button\" className=\"clear-completed\">\n          Clear completed\n        </button>\n      </footer>\n    </section>\n  );\n};\n\nTodoApp.propTypes = {\n  todos: PropTypes.arrayOf(shape({\n    id: PropTypes.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  setTodos: PropTypes.func.isRequired,\n};\n\n// (\n//   <section className=\"todoapp\">\n//     <header className=\"header\">\n//       <h1>todos</h1>\n\n//       <form>\n//         <input\n//           type=\"text\"\n//           className=\"new-todo\"\n//           placeholder=\"What needs to be done?\"\n//         />\n//       </form>\n//     </header>\n\n//     <section className=\"main\">\n//       <input type=\"checkbox\" id=\"toggle-all\" className=\"toggle-all\" />\n//       <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n//       <ul className=\"todo-list\">\n//         <li>\n//           <div className=\"view\">\n//             <input type=\"checkbox\" className=\"toggle\" />\n//             <label>asdfghj</label>\n//             <button type=\"button\" className=\"destroy\" />\n//           </div>\n//           <input type=\"text\" className=\"edit\" />\n//         </li>\n\n//         <li className=\"completed\">\n//           <div className=\"view\">\n//             <input type=\"checkbox\" className=\"toggle\" />\n//             <label>qwertyuio</label>\n//             <button type=\"button\" className=\"destroy\" />\n//           </div>\n//           <input type=\"text\" className=\"edit\" />\n//         </li>\n\n//         <li className=\"editing\">\n//           <div className=\"view\">\n//             <input type=\"checkbox\" className=\"toggle\" />\n//             <label>zxcvbnm</label>\n//             <button type=\"button\" className=\"destroy\" />\n//           </div>\n//           <input type=\"text\" className=\"edit\" />\n//         </li>\n\n//         <li>\n//           <div className=\"view\">\n//             <input type=\"checkbox\" className=\"toggle\" />\n//             <label>1234567890</label>\n//             <button type=\"button\" className=\"destroy\" />\n//           </div>\n//           <input type=\"text\" className=\"edit\" />\n//         </li>\n//       </ul>\n//     </section>\n\n//     <footer className=\"footer\">\n//       <span className=\"todo-count\">\n//         3 items left\n//       </span>\n\n//       <ul className=\"filters\">\n//         <li>\n//           <a href=\"#/\" className=\"selected\">All</a>\n//         </li>\n\n//         <li>\n//           <a href=\"#/active\">Active</a>\n//         </li>\n\n//         <li>\n//           <a href=\"#/completed\">Completed</a>\n//         </li>\n//       </ul>\n\n//       <button type=\"button\" className=\"clear-completed\">\n//         Clear completed\n//       </button>\n//     </footer>\n//   </section>\n// );\n// };\n","import React, { useState } from 'react';\n// import PropTypes from 'prop-types';\nimport { TodoApp } from './components/TodoApp';\n\nconst basicTodos = [\n  { id: 1,\n    title: 'first todo',\n    completed: false },\n  { id: 2,\n    title: 'second todo',\n    completed: true },\n];\n\nfunction App() {\n  const [todos, setTodos] = useState(basicTodos);\n  // const [filterForTodos, setFilterForTodos] = useState([...todos]);\n\n  // useEffect(() => {\n  //   setFilterForTodos(todos => (\n  //     fileteforTodos === 'All'\n  //       ? prevTodos\n  //       : prevTodos.filter(todo => (\n  //         fileteforTodos === 'Comleted'\n  //           ? todo.completed\n  //           : !todo.completed\n  //       ))\n  //   ));\n  // }, [fileteforTodos]);\n\n  return (\n    <TodoApp\n      todos={todos}\n      setTodos={setTodos}\n      // filterForTodos={filterForTodos}\n      // setFilterForTodos={setFilterForTodos}\n    />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}